/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class OptionalCompactionInfoStruct implements org.apache.thrift.TBase<OptionalCompactionInfoStruct, OptionalCompactionInfoStruct._Fields>, java.io.Serializable, Cloneable, Comparable<OptionalCompactionInfoStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OptionalCompactionInfoStruct");
=======
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetPartitionResponse implements org.apache.thrift.TBase<GetPartitionResponse, GetPartitionResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetPartitionResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPartitionResponse");
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java

  private static final org.apache.thrift.protocol.TField CI_FIELD_DESC = new org.apache.thrift.protocol.TField("ci", org.apache.thrift.protocol.TType.STRUCT, (short)1);

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OptionalCompactionInfoStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OptionalCompactionInfoStructTupleSchemeFactory());
  }

  private CompactionInfoStruct ci; // optional
=======
  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetPartitionResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetPartitionResponseTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable Partition partition; // required
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CI((short)1, "ci");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CI
          return CI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
  private static final _Fields optionals[] = {_Fields.CI};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CI, new org.apache.thrift.meta_data.FieldMetaData("ci", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "CompactionInfoStruct")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OptionalCompactionInfoStruct.class, metaDataMap);
=======
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Partition.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPartitionResponse.class, metaDataMap);
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java
  }

  public OptionalCompactionInfoStruct() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OptionalCompactionInfoStruct(OptionalCompactionInfoStruct other) {
    if (other.isSetCi()) {
      this.ci = other.ci;
    }
  }

  public OptionalCompactionInfoStruct deepCopy() {
    return new OptionalCompactionInfoStruct(this);
  }

  @Override
  public void clear() {
    this.ci = null;
  }

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
  public CompactionInfoStruct getCi() {
    return this.ci;
  }

  public void setCi(CompactionInfoStruct ci) {
    this.ci = ci;
=======
  @org.apache.thrift.annotation.Nullable
  public Partition getPartition() {
    return this.partition;
  }

  public void setPartition(@org.apache.thrift.annotation.Nullable Partition partition) {
    this.partition = partition;
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java
  }

  public void unsetCi() {
    this.ci = null;
  }

  /** Returns true if field ci is set (has been assigned a value) and false otherwise */
  public boolean isSetCi() {
    return this.ci != null;
  }

  public void setCiIsSet(boolean value) {
    if (!value) {
      this.ci = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CI:
      if (value == null) {
        unsetCi();
      } else {
        setCi((CompactionInfoStruct)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CI:
      return getCi();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CI:
      return isSetCi();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof OptionalCompactionInfoStruct)
      return this.equals((OptionalCompactionInfoStruct)that);
    return false;
  }

  public boolean equals(OptionalCompactionInfoStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ci = true && this.isSetCi();
    boolean that_present_ci = true && that.isSetCi();
    if (this_present_ci || that_present_ci) {
      if (!(this_present_ci && that_present_ci))
        return false;
      if (!this.ci.equals(that.ci))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
    boolean present_ci = true && (isSetCi());
    list.add(present_ci);
    if (present_ci)
      list.add(ci);
=======
    hashCode = hashCode * 8191 + ((isSetPartition()) ? 131071 : 524287);
    if (isSetPartition())
      hashCode = hashCode * 8191 + partition.hashCode();
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java

    return hashCode;
  }

  @Override
  public int compareTo(OptionalCompactionInfoStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
    lastComparison = Boolean.valueOf(isSetCi()).compareTo(other.isSetCi());
=======
    lastComparison = java.lang.Boolean.valueOf(isSetPartition()).compareTo(other.isSetPartition());
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ci, other.ci);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
  public String toString() {
    StringBuilder sb = new StringBuilder("OptionalCompactionInfoStruct(");
=======
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetPartitionResponse(");
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java
    boolean first = true;

    if (isSetCi()) {
      sb.append("ci:");
      if (this.ci == null) {
        sb.append("null");
      } else {
        sb.append(this.ci);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
  private static class OptionalCompactionInfoStructStandardSchemeFactory implements SchemeFactory {
    public OptionalCompactionInfoStructStandardScheme getScheme() {
      return new OptionalCompactionInfoStructStandardScheme();
    }
  }

  private static class OptionalCompactionInfoStructStandardScheme extends StandardScheme<OptionalCompactionInfoStruct> {
=======
  private static class GetPartitionResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetPartitionResponseStandardScheme getScheme() {
      return new GetPartitionResponseStandardScheme();
    }
  }

  private static class GetPartitionResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetPartitionResponse> {
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java

    public void read(org.apache.thrift.protocol.TProtocol iprot, OptionalCompactionInfoStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ci = new CompactionInfoStruct();
              struct.ci.read(iprot);
              struct.setCiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OptionalCompactionInfoStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ci != null) {
        if (struct.isSetCi()) {
          oprot.writeFieldBegin(CI_FIELD_DESC);
          struct.ci.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/OptionalCompactionInfoStruct.java
  private static class OptionalCompactionInfoStructTupleSchemeFactory implements SchemeFactory {
    public OptionalCompactionInfoStructTupleScheme getScheme() {
      return new OptionalCompactionInfoStructTupleScheme();
    }
  }

  private static class OptionalCompactionInfoStructTupleScheme extends TupleScheme<OptionalCompactionInfoStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OptionalCompactionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCi()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCi()) {
        struct.ci.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OptionalCompactionInfoStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.ci = new CompactionInfoStruct();
        struct.ci.read(iprot);
        struct.setCiIsSet(true);
      }
=======
  private static class GetPartitionResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetPartitionResponseTupleScheme getScheme() {
      return new GetPartitionResponseTupleScheme();
    }
  }

  private static class GetPartitionResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetPartitionResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetPartitionResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.partition.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetPartitionResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.partition = new Partition();
      struct.partition.read(iprot);
      struct.setPartitionIsSet(true);
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionResponse.java
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

