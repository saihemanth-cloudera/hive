/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hive.metastore.api;

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class ScheduledQueryPollRequest implements org.apache.thrift.TBase<ScheduledQueryPollRequest, ScheduledQueryPollRequest._Fields>, java.io.Serializable, Cloneable, Comparable<ScheduledQueryPollRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ScheduledQueryPollRequest");
=======
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)")
@org.apache.hadoop.classification.InterfaceAudience.Public @org.apache.hadoop.classification.InterfaceStability.Stable public class GetPartitionNamesPsResponse implements org.apache.thrift.TBase<GetPartitionNamesPsResponse, GetPartitionNamesPsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetPartitionNamesPsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetPartitionNamesPsResponse");
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java

  private static final org.apache.thrift.protocol.TField CLUSTER_NAMESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterNamespace", org.apache.thrift.protocol.TType.STRING, (short)1);

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ScheduledQueryPollRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ScheduledQueryPollRequestTupleSchemeFactory());
  }

  private String clusterNamespace; // required
=======
  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetPartitionNamesPsResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetPartitionNamesPsResponseTupleSchemeFactory();

  private @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names; // required
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLUSTER_NAMESPACE((short)1, "clusterNamespace");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLUSTER_NAMESPACE
          return CLUSTER_NAMESPACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLUSTER_NAMESPACE, new org.apache.thrift.meta_data.FieldMetaData("clusterNamespace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScheduledQueryPollRequest.class, metaDataMap);
=======
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetPartitionNamesPsResponse.class, metaDataMap);
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
  }

  public ScheduledQueryPollRequest() {
  }

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
  public ScheduledQueryPollRequest(
    String clusterNamespace)
=======
  public GetPartitionNamesPsResponse(
    java.util.List<java.lang.String> names)
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
  {
    this();
    this.clusterNamespace = clusterNamespace;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
  public ScheduledQueryPollRequest(ScheduledQueryPollRequest other) {
    if (other.isSetClusterNamespace()) {
      this.clusterNamespace = other.clusterNamespace;
=======
  public GetPartitionNamesPsResponse(GetPartitionNamesPsResponse other) {
    if (other.isSetNames()) {
      java.util.List<java.lang.String> __this__names = new java.util.ArrayList<java.lang.String>(other.names);
      this.names = __this__names;
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
    }
  }

  public ScheduledQueryPollRequest deepCopy() {
    return new ScheduledQueryPollRequest(this);
  }

  @Override
  public void clear() {
    this.clusterNamespace = null;
  }

  public String getClusterNamespace() {
    return this.clusterNamespace;
  }

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
  public void setClusterNamespace(String clusterNamespace) {
    this.clusterNamespace = clusterNamespace;
  }

  public void unsetClusterNamespace() {
    this.clusterNamespace = null;
=======
  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(java.lang.String elem) {
    if (this.names == null) {
      this.names = new java.util.ArrayList<java.lang.String>();
    }
    this.names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getNames() {
    return this.names;
  }

  public void setNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names) {
    this.names = names;
  }

  public void unsetNames() {
    this.names = null;
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
  }

  /** Returns true if field clusterNamespace is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterNamespace() {
    return this.clusterNamespace != null;
  }

  public void setClusterNamespaceIsSet(boolean value) {
    if (!value) {
      this.clusterNamespace = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CLUSTER_NAMESPACE:
      if (value == null) {
        unsetClusterNamespace();
      } else {
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
        setClusterNamespace((String)value);
=======
        setNames((java.util.List<java.lang.String>)value);
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLUSTER_NAMESPACE:
      return getClusterNamespace();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLUSTER_NAMESPACE:
      return isSetClusterNamespace();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ScheduledQueryPollRequest)
      return this.equals((ScheduledQueryPollRequest)that);
    return false;
  }

  public boolean equals(ScheduledQueryPollRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clusterNamespace = true && this.isSetClusterNamespace();
    boolean that_present_clusterNamespace = true && that.isSetClusterNamespace();
    if (this_present_clusterNamespace || that_present_clusterNamespace) {
      if (!(this_present_clusterNamespace && that_present_clusterNamespace))
        return false;
      if (!this.clusterNamespace.equals(that.clusterNamespace))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
    boolean present_clusterNamespace = true && (isSetClusterNamespace());
    list.add(present_clusterNamespace);
    if (present_clusterNamespace)
      list.add(clusterNamespace);
=======
    hashCode = hashCode * 8191 + ((isSetNames()) ? 131071 : 524287);
    if (isSetNames())
      hashCode = hashCode * 8191 + names.hashCode();
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java

    return hashCode;
  }

  @Override
  public int compareTo(ScheduledQueryPollRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
    lastComparison = Boolean.valueOf(isSetClusterNamespace()).compareTo(other.isSetClusterNamespace());
=======
    lastComparison = java.lang.Boolean.valueOf(isSetNames()).compareTo(other.isSetNames());
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterNamespace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterNamespace, other.clusterNamespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
  public String toString() {
    StringBuilder sb = new StringBuilder("ScheduledQueryPollRequest(");
=======
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetPartitionNamesPsResponse(");
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
    boolean first = true;

    sb.append("clusterNamespace:");
    if (this.clusterNamespace == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterNamespace);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetClusterNamespace()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clusterNamespace' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
  private static class ScheduledQueryPollRequestStandardSchemeFactory implements SchemeFactory {
    public ScheduledQueryPollRequestStandardScheme getScheme() {
      return new ScheduledQueryPollRequestStandardScheme();
    }
  }

  private static class ScheduledQueryPollRequestStandardScheme extends StandardScheme<ScheduledQueryPollRequest> {
=======
  private static class GetPartitionNamesPsResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetPartitionNamesPsResponseStandardScheme getScheme() {
      return new GetPartitionNamesPsResponseStandardScheme();
    }
  }

  private static class GetPartitionNamesPsResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetPartitionNamesPsResponse> {
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java

    public void read(org.apache.thrift.protocol.TProtocol iprot, ScheduledQueryPollRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
          case 1: // CLUSTER_NAMESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterNamespace = iprot.readString();
              struct.setClusterNamespaceIsSet(true);
=======
          case 1: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list1240 = iprot.readListBegin();
                struct.names = new java.util.ArrayList<java.lang.String>(_list1240.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1241;
                for (int _i1242 = 0; _i1242 < _list1240.size; ++_i1242)
                {
                  _elem1241 = iprot.readString();
                  struct.names.add(_elem1241);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ScheduledQueryPollRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
      if (struct.clusterNamespace != null) {
        oprot.writeFieldBegin(CLUSTER_NAMESPACE_FIELD_DESC);
        oprot.writeString(struct.clusterNamespace);
=======
      if (struct.names != null) {
        oprot.writeFieldBegin(NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
          for (java.lang.String _iter1243 : struct.names)
          {
            oprot.writeString(_iter1243);
          }
          oprot.writeListEnd();
        }
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

<<<<<<< HEAD:standalone-metastore/metastore-common/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ScheduledQueryPollRequest.java
  private static class ScheduledQueryPollRequestTupleSchemeFactory implements SchemeFactory {
    public ScheduledQueryPollRequestTupleScheme getScheme() {
      return new ScheduledQueryPollRequestTupleScheme();
    }
  }

  private static class ScheduledQueryPollRequestTupleScheme extends TupleScheme<ScheduledQueryPollRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ScheduledQueryPollRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.clusterNamespace);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ScheduledQueryPollRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.clusterNamespace = iprot.readString();
      struct.setClusterNamespaceIsSet(true);
=======
  private static class GetPartitionNamesPsResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetPartitionNamesPsResponseTupleScheme getScheme() {
      return new GetPartitionNamesPsResponseTupleScheme();
    }
  }

  private static class GetPartitionNamesPsResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetPartitionNamesPsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetPartitionNamesPsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.names.size());
        for (java.lang.String _iter1244 : struct.names)
        {
          oprot.writeString(_iter1244);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetPartitionNamesPsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list1245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.names = new java.util.ArrayList<java.lang.String>(_list1245.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem1246;
        for (int _i1247 = 0; _i1247 < _list1245.size; ++_i1247)
        {
          _elem1246 = iprot.readString();
          struct.names.add(_elem1246);
        }
      }
      struct.setNamesIsSet(true);
>>>>>>> f989cc9dc9... CDPD-6010: HIVE-21498: Thrift version upgrade to 0.13:standalone-metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/GetPartitionNamesPsResponse.java
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

